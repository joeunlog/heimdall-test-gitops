###/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/##
###### helm chart name : kube-prometheus-stack
###### helm chart version : 58.6.0
###### helm chart repo : https://prometheus-community.github.io/helm-charts
###/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/##
###### 해당 차트의 기본 values.yaml은 4700줄 정도이며, 그 중 overwrite 해야 하는 부분만 유지하고 기본 설정을 사용하는 항목은 삭제
###### 주요한 컴포넌트들은 설명을 위해 default 값이어도 유지함 (ex: crds.enabled, kubernetesServiceMonitors.enabled)
###/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/##


###### prometheus-operator를 위한 custom resource definition 배포 여부 설정 (crds 서브 차트 설치)
###### default는 true
crds:
  enabled: false #!#!#! crd 배포 안하고 설치해보기


###### kube-prometheus-stack에서 기본 제공하는 recording rule과 alerting rule 설정
###### 작은 클러스터에서는 전부 활성화해서 쓰지만, 규모가 큰 클러스터는 필요한 것만 활성화하는 것을 추천 (record, alert 모두 prometheus에 부하를 주기 때문)
defaultRules:
  create: true
  rules:
    alertmanager: true
    etcd: false
    configReloaders: true
    general: true
    k8sContainerCpuUsageSecondsTotal: true
    k8sContainerMemoryCache: true
    k8sContainerMemoryRss: true
    k8sContainerMemorySwap: true
    k8sContainerResource: true
    k8sContainerMemoryWorkingSetBytes: true
    k8sPodOwner: true
    kubeApiserverAvailability: true
    kubeApiserverBurnrate: true
    kubeApiserverHistogram: true
    kubeApiserverSlos: true
    kubeControllerManager: false
    kubelet: true
    kubeProxy: true
    kubePrometheusGeneral: true
    kubePrometheusNodeRecording: true
    kubernetesApps: true
    kubernetesResources: true
    kubernetesStorage: true
    kubernetesSystem: true
    kubeSchedulerAlerting: false
    kubeSchedulerRecording: false
    kubeStateMetrics: true
    network: true
    node: true
    nodeExporterAlerting: true
    nodeExporterRecording: true
    prometheus: true
    prometheusOperator: true
    windows: false


###### 사용자가 직접 prometheus recording, alerting rule을 생성할 때 사용
additionalPrometheusRulesMap: {}
#  rule-name:
#    groups:
#    - name: my_group
#      rules:
#      - record: my_record
#        expr: 100 * my_record


###### 모든 구성요소에 대하여, 해당 구성요소 pod가 배포될 위치를 지정하거나, domain 정보와 같이 공통으로 사용되는 정보를 정의
###### global에서 여러 구성요소에 정의해야 하는 항목을 지원하지 않으면 yaml anchor를 사용하여 변수처럼 값을 정의
global:
  affinity: &global-affinity
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
          - matchExpressions:
              - key: role
                operator: In
                values:
                  - ops
  tolerations: &global-tolerations
    - key: "role"
      operator: "Equal"
      value: "ops"
      effect: "NoSchedule"


###/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/##
###### Prometheus alertmanager : prometheus rule에 기반하여 alerting을 해주는 구성요소
###/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/##
###### 생성되는 것 : templates/alertmanager에 위치한 manifest
###### Managed by : prometheus-operator (Alertmanager라는 Custom Resource를 생성하면 prometheus-operator가 해당 spec에 맞는 Statefulset 생성)
###/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/##
alertmanager:
  enabled: true

  ###### prometheus alertmanager 모니터링 설정
  serviceMonitor:
    selfMonitor: true
  
  ###### Alertmanager 스펙 설정
  alertmanagerSpec:
    replicas: 1
    retention: 120h
    resources:
      requests:
        memory: 400Mi
    affinity: *global-affinity
    tolerations: *global-tolerations


###/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/##
###### Grafana : UI를 통해 모니터링 데이터를 쉽게 볼 수 있도록 해주는 Visualization 도구
###/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/##
###### Grafana는 Sub helm chart를 이용하여 배포하고, Grafana를 통해 기본 제공되는 Dashboard는 이 helm chart에서 배포
###### 생성되는 것 : Sub chart 중 하나인 grafana helm chart가 활성화 됨
###### Workload : Deployment(default) or Statefulset
###/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/##
grafana:
  enabled: true

  ###### kube-prometheus-stack에서 제공하는 기본 Dashboard 활성화여부
  defaultDashboardsEnabled: true

  ###### Grafana Admin password 설정
  adminPassword: prom-operator

  ###### Grafana를 Statefulset 형태로 배포하고 PVC를 붙여서 Grafana 설정을 계속 유지할 수 있도록 하는 설정
  # persistence:
  #   enabled: true
  #   type: sts
  #   storageClassName: "storageClassName"
  #   accessModes:
  #     - ReadWriteOnce
  #   size: 20Gi
  #   finalizers:
  #     - kubernetes.io/pvc-protection

  ###### Grafana의 pod에 sidecar를 붙여서 grafana datasource나 dashboard 등록을 kubernetes상에서 가능하도록 하는 설정
  sidecar:
    dashboards:
      enabled: true
    datasources:
      enabled: true
      defaultDatasourceEnabled: true
      isDefaultDatasource: true

  ###### Grafana 모니터링 설정
  serviceMonitor:
    enabled: true

  #### !! --------------------------------- sub chart 설정을 위한 추가 values ------------------------------------
  #### !! kube-prometheus-stack halm chart의 values에는 지정하지 않는 값들이지만, grafana를 배포할 때 사용해야 하는 값
  #### !! grafana가 sub chart이므로, grafana의 default values를 참고하여 아래와 같이 값 지정
  affinity: *global-affinity
  tolerations: *global-tolerations
  resources:
    requests:
      cpu: 100m
      memory: 128Mi
  #### !! --------------------------- 여기까지가 sub chart 설정을 위한 추가 values ------------------------------------


###/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/##
###### k8s의 구성 요소 모니터링 설정
###### 이 옵션을 false로 지정하면, 뒤이어 설정하는 k8s의 구성 요소 관련 모니터링을 하더라도 실제로는 모니터링 적용이 되지 않기 때문에,
###### k8s에 대한 모니터링을 꼭 꺼야 하는 경우가 아니라면 true로 지정 필수
###/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/##
kubernetesServiceMonitors:
  enabled: true


###/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/##
###### k8s의 주요 구성 요소 중 하나인 kubernetes api server에 대한 모니터링 설정
###### kube api server는 이미 service 타입의 엔드포인트가 존재하므로, 이 옵션을 통해서는 ServiceMonitor에 대한 설정을 진행
###/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/##
###### 생성되는 것 : ServiceMonitor
###/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/##
kubeApiServer:
  enabled: true
  serviceMonitor:
    interval: ""

    ###### demo 시연용 추가 라벨 지정
    additionalLabels:
      demo-k8s-component: kube-api-server


###/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/##
###### k8s의 주요 구성 요소 중 하나인 kubelet에 대한 모니터링 설정
###### kubelet의 cAdvisor를 통해 container와 관련된 메트릭을 수집
###### kubelet의 service 타입의 엔드포인트는 prometheus-operator가 직접 생성하고, 이 옵션을 통해서는 ServiceMonitor에 대한 설정을 진행
###/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/##
###### 생성되는 것 : ServiceMonitor
###/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/##
kubelet:
  enabled: true
  namespace: kube-system

  serviceMonitor:
    ###### /metrics/cadvisor 경로의 metric 수집 활성화 여부 (container metric)
    cAdvisor: true

    ###### /metrics/probes 경로의 metric 수집 활성화 여부
    probes: true

    ###### demo 시연용 추가 라벨 지정
    additionalLabels:
      demo-k8s-component: kubelet


###/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/##
###### k8s의 주요 구성 요소 중 하나인 kubernetes controller manager에 대한 모니터링 설정
###### EKS에서는 컨트롤 플레인에 존재하는 kube-controller-manager에 대한 접근을 할 수 없도록 설정되어 있어서 이 옵션을 활성화해도 모니터링 불가
###/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/##
###### 생성되는 것 : Service, ServiceMonitor
###/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/##
kubeControllerManager:
  enabled: true  #!#!#! kube-controller-manager 모니터링 활성화가 되는지 테스트해보기

  ###### Metric 수집용 k8s controller manager service 생성
  service:
    enabled: true

  ###### k8s controller manager 모니터링 설정
  serviceMonitor:
    enabled: true


###/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/##
###### k8s의 주요 구성 요소 중 하나인 CoreDNS에 대한 모니터링 설정
###/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/##
###### 생성되는 것 : Service, ServiceMonitor
###/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/##
coreDns:
  enabled: true
  service:
    enabled: true
  serviceMonitor:
    enabled: true


###/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/##
###### k8s의 주요 구성 요소 중 하나인 kubeDNS에 대한 모니터링 설정
###### CoreDNS를 사용하는 경우, 해당 모니터링은 비활성화
###/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/##
###### 생성되는 것 : Service, ServiceMonitor
###/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/##
kubeDns:
  enabled: false


###/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/##
###### k8s의 주요 구성 요소 중 하나인 ETCD에 대한 모니터링 설정
###### EKS에서는 컨트롤 플레인에 존재하는 ETCD에 대한 접근을 할 수 없도록 설정되어 있어서 이 옵션을 활성화해도 모니터링 불가
###/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/##
###### 생성되는 것 : Service, ServiceMonitor
###/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/##
kubeEtcd:
  enabled: false
  service:
    enabled: true
  serviceMonitor:
    enabled: true


###/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/##
###### k8s의 주요 구성 요소 중 하나인 kubernetes scheduler에 대한 모니터링 설정
###### EKS에서는 컨트롤 플레인에 존재하는 kubernetes scheduler에 대한 접근을 할 수 없도록 설정되어 있어서 이 옵션을 활성화해도 모니터링 불가
###/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/##
###### 생성되는 것 : Service, ServiceMonitor
###/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/##
kubeScheduler:
  enabled: false
  service:
    enabled: true
  serviceMonitor:
    enabled: true


###/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/##
###### k8s의 주요 구성 요소 중 하나인 kube proxy에 대한 모니터링 설정
###/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/##
###### 생성되는 것 : Service, ServiceMonitor
###/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/##
kubeProxy:
  enabled: true
  service:
    enabled: true
  serviceMonitor:
    enabled: true


###/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/##
###### kube-state-metrics sub chart 활성화 여부
###### kube-state-metrics : k8s의 object에 대한 metric을 모아주는 agent(exporter)
###/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/##
###### 생성되는 것 : Sub chart 중 하나인 kube-state-metrics helm chart가 활성화 됨
###/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/##
kubeStateMetrics:
  enabled: true


###/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/##
###### kube-state-metrics sub chart에 대한 설정
###/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/##
###### 생성되는 것 : Sub chart 중 하나인 kube-state-metrics helm chart가 활성화 됨
###### Workload : Deployment(default) or Statefulset
###/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/##
kube-state-metrics:
  #### !! --------------------------------- sub chart 설정을 위한 추가 values ------------------------------------
  #### !! kube-prometheus-stack halm chart의 values에는 지정하지 않는 값들이지만, kube-state-metrics를 배포할 때 사용해야 하는 값
  #### !! kube-state-metrics가 sub chart이므로, kube-state-metrics의 default values를 참고하여 아래와 같이 값 지정
  affinity: *global-affinity
  tolerations: *global-tolerations
  ###### nodes=[eks.amazonaws.com/nodegroup] : node 관련 메트릭에 nodegroup 라벨을 추가로 수집하기 위한 설정
  ###### pods=[dummy],namespaces=[dummy] : pod와 namespace 관련 메트릭에 기본 라벨을 수집하기 위한 설정
  extraArgs:
    - "--metric-labels-allowlist=nodes=[eks.amazonaws.com/nodegroup],pods=[dummy],namespaces=[dummy]"
  ###### kube-state-metric container의 resource 지정
  resources:
    requests:
      cpu: "10m"
      memory: "60Mi"
  #### !! --------------------------- 여기까지가 sub chart 설정을 위한 추가 values ------------------------------------
  
  ###### kube-state-metrics을 통한 모니터링 설정
  prometheus:
    monitor:
      enabled: true

      ###### label_eks_amazonaws_com_nodegroup 라벨의 키값을 nodegroup으로 변경
      metricRelabelings:
      - sourceLabels:
        - label_eks_amazonaws_com_nodegroup
        targetLabel: nodegroup

      ###### __meta_kubernetes_pod_node_name 라벨의 키값을 node로 변경
      relabelings:
      - sourceLabels:
        - __meta_kubernetes_pod_node_name
        targetLabel: node

  ###### kube-state-metrics 자체 모니터링 활성화 여부 (kube-state-metrics가 잘 작동하고 있는지 모니터링)
  selfMonitor:
    enabled: true


###/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/##
###### prometheus-node-exporter sub chart 활성화 여부
###### node-exporter : k8s worker node의 metric을 모아주는 agent(exporter)
###/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/##
###### 생성되는 것 : Sub chart 중 하나인 node-exporter helm chart가 활성화 됨
###/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/##
nodeExporter:
  enabled: true


###/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/##
###### prometheus-node-exporter sub chart에 대한 설정
###/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/##
###### 생성되는 것 : Sub chart 중 하나인 prometheus-node-exporter helm chart가 활성화 되고, 관련 rbac과 grafana dashboard가 생성됨
###### Workload : Daemonset
###/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/##
prometheus-node-exporter:
  prometheus:
    monitor:
      enabled: false    #!#!#! node-exporter의 servicemonitor 안만들고 설치해보기

      ###### __meta_kubernetes_pod_node_name 라벨의 키값을 node로 변경
      relabelings:
      - sourceLabels:
        - __meta_kubernetes_pod_node_name
        targetLabel: node

  #### !! --------------------------------- sub chart 설정을 위한 추가 values ------------------------------------
  #### !! kube-prometheus-stack halm chart의 values에는 지정하지 않는 값들이지만, node-exporter를 배포할 때 사용해야 하는 값
  #### !! node-exporter가 sub chart이므로, node-exporter의 default values를 참고하여 아래와 같이 값 지정
  resources:
    requests:
      cpu: 20m
      memory: 64Mi
  ###### affinity, toleration 설정이 없는 이유는 node-exporter는 daemonset 형식으로 모든 노드에 배포되어야 하는데,
  ###### node-exporter helm chart의 default values 내 toleration에 모든 노드에 배포될 수 있게 하는 기본값이 들어있기 때문
  #### !! --------------------------- 여기까지가 sub chart 설정을 위한 추가 values ------------------------------------


###/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/##
###### prometheus-operator : prometheus 구성요소 배포, 세부 설정, 모니터링 설정 등을 위한 어플리케이션
###/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/##
###### 생성되는 것 : templates/prometheus-operator에 위치한 manifest
###### Workload : Deployment
###/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/##
prometheusOperator:
  enabled: true
  revisionHistoryLimit: 5

  ###/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/##
  ###### kube-prometheus-stack의 구성요소 배포 전 가장 먼저 실행되어, 각 설정사항에 대한 유효성 검사를 수행하는 구성 요소
  ###### Workload : Job(default) or Deployment
  ###/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/##
  admissionWebhooks:
    enabled: true
    deployment:
      enabled: false
    patch:
      enabled: true
      resources: {}
      affinity: *global-affinity
      tolerations: *global-tolerations

  ###/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/##
  ###### 이 파일의 186번째 줄부터 시작하는 kubelet 모니터링 설정은 ServiceMonitor만 활성화하고, 여기는 Service를 활성화
  ###### 여기에 정의하는 스펙은 prometheus-operator의 args에 지정되고, operator가 그 스펙에 맞게 리소스를 생성함
  ###### Managed by : prometheus-operator
  ###/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/##
  kubeletService:
    enabled: false   #!#!#! kubelet 서비스 안만들고 설치해보기
    namespace: kube-system

  ###### prometheus-operator 모니터링에 대한 설정 (prometheus-operator가 잘 작동하고 있는지)
  serviceMonitor:
    selfMonitor: true

  ###### prometheus-operator resource 지정
  resources:
    requests:
      cpu: 100m
      memory: 100Mi

  ###### prometheus-operator pod가 배포될 위치에 대한 설정
  tolerations: *global-tolerations
  affinity: *global-affinity

  ###/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/##
  ###### prometheus config reloader : prometheus.yaml을 업데이트하기 위한 container
  ###### 여기에 정의하는 스펙은 prometheus-operator의 args에 지정되고, operator가 그 스펙에 맞게 리소스를 생성함
  ###### Managed by : prometheus-operator
  ###### 실제로 config-reloader가 생성되는 곳은 prometheus pod이므로, toleration이나 affinity 설정이 필요 없음
  ###/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/##
  prometheusConfigReloader:
    resources:
      requests:
        cpu: 200m
        memory: 50Mi


###/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/##
###### Prometheus : metric 데이터를 수집, 저장하고 Visualization 하는 어플리케이션
###/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/##
###### 생성되는 것 : templates/prometheus에 위치한 manifest
###### Managed by : prometheus-operator (PrometheusAgent라는 Custom Resource를 생성하면 prometheus-operator가 해당 spec에 맞는 workload 생성)
###/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/##
prometheus:
  enabled: true

  ###### Thanos는 prometheus의 가용성을 높이기 위해 사용하는 것으로, 기본으로 설치하는 경우에는 사용하지 않음
  ###### default가 전부 enabled: false이므로 아래 값들은 삭제해도 됨
  thanosService:
    enabled: false
  thanosServiceMonitor:
    enabled: false
  thanosServiceExternal:
    enabled: false
  thanosIngress:
    enabled: false

  ###### prometheus ingress 설정 - demo에선 사용하지 않음
  ingress:
    enabled: false

  ###### prometheus 모니터링에 대한 설정 (prometheus가 잘 작동하고 있는지)
  serviceMonitor:
    selfMonitor: true

  ###/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/##
  ###### Prometheus의 spec에 대한 정의
  ###/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/##
  prometheusSpec:
    ###### prometheus가 agent로부터 metric을 수집하는 주기. default는 30초
    scrapeInterval: "30s"

    tolerations: *global-tolerations

    ###### prometheus로 수집하는 metric에 공통적인 label을 붙일 때 사용
    ###### 주로 k8s cluster 1개당 하나의 prometheus를 설치하므로, cluster에 대한 정보 값을 라벨로 추가
    externalLabels:
      cluster: demo-monitoring-eks

    ### !!!!!!!!!!!!!!!!!! --------- Prometheus Custom Resouce 설정 시작 --------- !!!!!!!!!!!!!!!!!! ###
    ###/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/##
    ###### prometheus 관련 Custom Resource 중 아래 다섯 개 항목에 대하여
    ###### prometheus가 어떤 조건으로 Custom Resource를 감지하고 적용할 것인지에 대한 설정
    ###### 1. PrometheusRule
    ###### 2. ServiceMonitor
    ###### 3. PodMonitor
    ###### 4. Probe
    ###### 5. ScrapeConfig
    ###/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/##

    ###/#####/#####/#####/#####/#####/#####/## PrometheusRule ###/#####/#####/#####/#####/#####/#####/##
    
    ###### 특정 namespace에서만 prometheus rule을 감지하고 싶을 때 사용. namespace의 label을 기준으로 함
    ruleNamespaceSelector: {}
    #   matchLabels:
    #     prometheus: somelabel

    ###### 특정 label이 붙은 prometheus rule만 감지하는 옵션 활성화 여부
    ###### default는 true
    ###### 활성화 상태에서는 새로운 prometheus rule을 사용하고 싶으면 해당 custom resource에 helm release 관련 라벨과 아래 ruleSelector 관련 라벨을 붙여야 함
    ###### false로 변경하면, label과는 상관없이 모든 prometheus rule을 감지
    ruleSelectorNilUsesHelmValues: false

    ###### 어떤 label이 붙은 prometheus rule만 감지할 것인지 지정
    ruleSelector: {}
    #   matchExpressions:
    #     - key: prometheus
    #       operator: In
    #       values:
    #         - example-rules
    #   matchLabels:
    #     role: example-rules

    ###/#####/#####/#####/#####/#####/#####/## ServiceMonitor ###/#####/#####/#####/#####/#####/#####/##

    ###### 특정 label이 붙은 service monitor만 감지하는 옵션 활성화 여부
    ###### default는 true
    ###### 활성화 상태에서는 새로운 service monitor을 사용하고 싶으면 해당 custom resource에 helm release 관련 라벨과 아래 serviceMonitorSelector 관련 라벨을 붙여야 함
    ###### false로 변경하면, label과는 상관없이 모든 service monitor을 감지
    serviceMonitorSelectorNilUsesHelmValues: false

    ###### 어떤 label이 붙은 service monitor만 감지할 것인지 지정
    serviceMonitorSelector: {}
    #   matchLabels:
    #     prometheus: somelabel

    ###### 특정 namespace에서만 service monitor를 감지하고 싶을 때 사용. namespace의 label을 기준으로 함
    serviceMonitorNamespaceSelector: {}
    #   matchLabels:
    #     prometheus: somelabel

    ###/#####/#####/#####/#####/#####/#####/## PodMonitor ###/#####/#####/#####/#####/#####/#####/##

    ###### 특정 label이 붙은 pod monitor만 감지하는 옵션 활성화 여부
    ###### default는 true
    ###### 활성화 상태에서는 새로운 pod monitor을 사용하고 싶으면 해당 custom resource에 helm release 관련 라벨과 아래 podMonitorSelector 관련 라벨을 붙여야 함
    ###### false로 변경하면, label과는 상관없이 모든 pod monitor을 감지
    podMonitorSelectorNilUsesHelmValues: false

    ###### 어떤 label이 붙은 pod monitor만 감지할 것인지 지정
    podMonitorSelector: {}
    #   matchLabels:
    #     prometheus: somelabel

    ###### 특정 namespace에서만 pod monitor를 감지하고 싶을 때 사용. namespace의 label을 기준으로 함
    podMonitorNamespaceSelector: {}
    #   matchLabels:
    #     prometheus: somelabel

    ###/#####/#####/#####/#####/#####/#####/## Probe ###/#####/#####/#####/#####/#####/#####/##

    ###### 특정 label이 붙은 probe만 감지하는 옵션 활성화 여부
    ###### default는 true
    ###### 활성화 상태에서는 새로운 probe을 사용하고 싶으면 해당 custom resource에 helm release 관련 라벨과 아래 probeSelector 관련 라벨을 붙여야 함
    ###### false로 변경하면, label과는 상관없이 모든 probe을 감지
    probeSelectorNilUsesHelmValues: false

    ###### 어떤 label이 붙은 probe만 감지할 것인지 지정
    probeSelector: {}
    #   matchLabels:
    #     prometheus: somelabel

    ###### 특정 namespace에서만 probe를 감지하고 싶을 때 사용. namespace의 label을 기준으로 함
    probeNamespaceSelector: {}
    #   matchLabels:
    #     prometheus: somelabel

    ###/#####/#####/#####/#####/#####/#####/## ScrapeConfig ###/#####/#####/#####/#####/#####/#####/##

    ###### 특정 label이 붙은 scrape config만 감지하는 옵션 활성화 여부
    ###### default는 true
    ###### 활성화 상태에서는 새로운 scrape config을 사용하고 싶으면 해당 custom resource에 helm release 관련 라벨과 아래 scrapeConfigSelector 관련 라벨을 붙여야 함
    ###### false로 변경하면, label과는 상관없이 모든 scrape config을 감지
    scrapeConfigSelectorNilUsesHelmValues: false

    ###### 어떤 label이 붙은 scrape config만 감지할 것인지 지정
    scrapeConfigSelector: {}
    #   matchLabels:
    #     prometheus: somelabel

    ###### 특정 namespace에서만 scrape config를 감지하고 싶을 때 사용. namespace의 label을 기준으로 함
    scrapeConfigNamespaceSelector: {}
    #   matchLabels:
    #     prometheus: somelabel

    ###/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/#####/##
    ### !!!!!!!!!!!!!!!!!! --------- Prometheus Custom Resouce 설정 끝 --------- !!!!!!!!!!!!!!!!!! ###


    ###### prometheus의 metric 데이터 유지 기간. default는 10일
    retention: 3d

    replicas: 1
    affinity: *global-affinity

    ###### prometheus remote_read / remote_write 기능 설정 (외부 Metric을 가져오거나, 외부로 Metric을 보내는 기능)
    remoteRead: []
    additionalRemoteRead: []
    remoteWrite: []
    additionalRemoteWrite: []

    ###### prometheus container의 resource 지정
    resources:
      requests:
        memory: 400Mi

    ###### prometheus가 metric 데이터를 저장할 때 사용할 저장소 설정. PVC로 생성
    storageSpec:
      volumeClaimTemplate:
        spec:
          storageClassName: gp3
          accessModes: ["ReadWriteOnce"]
          resources:
            requests:
              storage: 50Gi

    ###### 추가로 배포하고자 하는 ScrapeConfig 정의
    additionalScrapeConfigs: []
    # - job_name: kube-etcd
    #   kubernetes_sd_configs:
    #     - role: node
    #   scheme: https
    #   tls_config:
    #     ca_file:   /etc/prometheus/secrets/etcd-client-cert/etcd-ca
    #     cert_file: /etc/prometheus/secrets/etcd-client-cert/etcd-client
    #     key_file:  /etc/prometheus/secrets/etcd-client-cert/etcd-client-key
    #   relabel_configs:
    #   - action: labelmap
    #     regex: __meta_kubernetes_node_label_(.+)
    #   - source_labels: [__address__]
    #     action: replace
    #     targetLabel: __address__
    #     regex: ([^:;]+):(\d+)
    #     replacement: ${1}:2379
    #   - source_labels: [__meta_kubernetes_node_name]
    #     action: keep
    #     regex: .*mst.*
    #   - source_labels: [__meta_kubernetes_node_name]
    #     action: replace
    #     targetLabel: node
    #     regex: (.*)
    #     replacement: ${1}
    #   metric_relabel_configs:
    #   - regex: (kubernetes_io_hostname|failure_domain_beta_kubernetes_io_region|beta_kubernetes_io_os|beta_kubernetes_io_arch|beta_kubernetes_io_instance_type|failure_domain_beta_kubernetes_io_zone)
    #     action: labeldrop

    ###### true로 설정하면 앞서 Prometheus 관련 Custom Resource 감지에 대해 특정 namespace에 있는 ojbect만 감지하도록 설정한 것을 무시하고,
    ###### 아래 조건을 충족하는 것들만 metric 수집 가능
    ###### Custom resource가 존재하는 namespace = 해당 custom resource를 통해 metric을 수집하고자 하는 endpoint의 namespace
    ###### default는 false
    ignoreNamespaceSelectors: false

  ###### 추가로 배포하고자 하는 ServiceMonitor, PodMonitor 정의
  additionalServiceMonitors: []
  additionalPodMonitors: []

###### Thanos는 prometheus의 가용성을 높이기 위해 사용하는 것으로, 기본으로 설치하는 경우에는 사용하지 않음
###### default가 전부 enabled: false이므로 아래 값들은 삭제해도 됨
thanosRuler:
  enabled: false

###### 구성요소 배포 시 리소스의 이름을 간소화하는 설정
###### PV와 같이 이름이 바뀌면 안되는 요소가 있으므로, 초기 설치에 설정된 값을 추후에 변경할 수 없음
###### default는 false
cleanPrometheusOperatorObjectNames: false

###### kube-prometheus-stack helm chart를 배포 할 때 함께 배포하고 싶은 k8s object 정의
extraManifests: []
  # - apiVersion: v1
  #   kind: ConfigMap
  #   metadata:
  #   labels:
  #     name: prometheus-extra
  #   data:
  #     extra-data: "value"
